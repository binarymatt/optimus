// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// MockTransformerImpl is an autogenerated mock type for the TransformerImpl type
type MockTransformerImpl struct {
	mock.Mock
}

type MockTransformerImpl_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransformerImpl) EXPECT() *MockTransformerImpl_Expecter {
	return &MockTransformerImpl_Expecter{mock: &_m.Mock}
}

// Initialize provides a mock function with given fields:
func (_m *MockTransformerImpl) Initialize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransformerImpl_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockTransformerImpl_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
func (_e *MockTransformerImpl_Expecter) Initialize() *MockTransformerImpl_Initialize_Call {
	return &MockTransformerImpl_Initialize_Call{Call: _e.mock.On("Initialize")}
}

func (_c *MockTransformerImpl_Initialize_Call) Run(run func()) *MockTransformerImpl_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransformerImpl_Initialize_Call) Return(_a0 error) *MockTransformerImpl_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransformerImpl_Initialize_Call) RunAndReturn(run func() error) *MockTransformerImpl_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Transform provides a mock function with given fields: ctx, data
func (_m *MockTransformerImpl) Transform(ctx context.Context, data *structpb.Struct) (*structpb.Struct, error) {
	ret := _m.Called(ctx, data)

	var r0 *structpb.Struct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *structpb.Struct) (*structpb.Struct, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *structpb.Struct) *structpb.Struct); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structpb.Struct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *structpb.Struct) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformerImpl_Transform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transform'
type MockTransformerImpl_Transform_Call struct {
	*mock.Call
}

// Transform is a helper method to define mock.On call
//   - ctx context.Context
//   - data *structpb.Struct
func (_e *MockTransformerImpl_Expecter) Transform(ctx interface{}, data interface{}) *MockTransformerImpl_Transform_Call {
	return &MockTransformerImpl_Transform_Call{Call: _e.mock.On("Transform", ctx, data)}
}

func (_c *MockTransformerImpl_Transform_Call) Run(run func(ctx context.Context, data *structpb.Struct)) *MockTransformerImpl_Transform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*structpb.Struct))
	})
	return _c
}

func (_c *MockTransformerImpl_Transform_Call) Return(_a0 *structpb.Struct, _a1 error) *MockTransformerImpl_Transform_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformerImpl_Transform_Call) RunAndReturn(run func(context.Context, *structpb.Struct) (*structpb.Struct, error)) *MockTransformerImpl_Transform_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTransformerImpl interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTransformerImpl creates a new instance of MockTransformerImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTransformerImpl(t mockConstructorTestingTNewMockTransformerImpl) *MockTransformerImpl {
	mock := &MockTransformerImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
