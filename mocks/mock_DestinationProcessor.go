// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	optimusv1 "github.com/binarymatt/optimus/gen/optimus/v1"
)

// MockDestinationProcessor is an autogenerated mock type for the DestinationProcessor type
type MockDestinationProcessor struct {
	mock.Mock
}

type MockDestinationProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDestinationProcessor) EXPECT() *MockDestinationProcessor_Expecter {
	return &MockDestinationProcessor_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockDestinationProcessor) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDestinationProcessor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDestinationProcessor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDestinationProcessor_Expecter) Close() *MockDestinationProcessor_Close_Call {
	return &MockDestinationProcessor_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDestinationProcessor_Close_Call) Run(run func()) *MockDestinationProcessor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDestinationProcessor_Close_Call) Return(_a0 error) *MockDestinationProcessor_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDestinationProcessor_Close_Call) RunAndReturn(run func() error) *MockDestinationProcessor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Deliver provides a mock function with given fields: _a0, _a1
func (_m *MockDestinationProcessor) Deliver(_a0 context.Context, _a1 *optimusv1.LogEvent) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *optimusv1.LogEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDestinationProcessor_Deliver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deliver'
type MockDestinationProcessor_Deliver_Call struct {
	*mock.Call
}

// Deliver is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *optimusv1.LogEvent
func (_e *MockDestinationProcessor_Expecter) Deliver(_a0 interface{}, _a1 interface{}) *MockDestinationProcessor_Deliver_Call {
	return &MockDestinationProcessor_Deliver_Call{Call: _e.mock.On("Deliver", _a0, _a1)}
}

func (_c *MockDestinationProcessor_Deliver_Call) Run(run func(_a0 context.Context, _a1 *optimusv1.LogEvent)) *MockDestinationProcessor_Deliver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*optimusv1.LogEvent))
	})
	return _c
}

func (_c *MockDestinationProcessor_Deliver_Call) Return(_a0 error) *MockDestinationProcessor_Deliver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDestinationProcessor_Deliver_Call) RunAndReturn(run func(context.Context, *optimusv1.LogEvent) error) *MockDestinationProcessor_Deliver_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields:
func (_m *MockDestinationProcessor) Setup() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDestinationProcessor_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type MockDestinationProcessor_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
func (_e *MockDestinationProcessor_Expecter) Setup() *MockDestinationProcessor_Setup_Call {
	return &MockDestinationProcessor_Setup_Call{Call: _e.mock.On("Setup")}
}

func (_c *MockDestinationProcessor_Setup_Call) Run(run func()) *MockDestinationProcessor_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDestinationProcessor_Setup_Call) Return(_a0 error) *MockDestinationProcessor_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDestinationProcessor_Setup_Call) RunAndReturn(run func() error) *MockDestinationProcessor_Setup_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDestinationProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDestinationProcessor creates a new instance of MockDestinationProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDestinationProcessor(t mockConstructorTestingTNewMockDestinationProcessor) *MockDestinationProcessor {
	mock := &MockDestinationProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
