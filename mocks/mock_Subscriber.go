// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	optimusv1 "github.com/binarymatt/optimus/gen/optimus/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockSubscriber is an autogenerated mock type for the Subscriber type
type MockSubscriber struct {
	mock.Mock
}

type MockSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriber) EXPECT() *MockSubscriber_Expecter {
	return &MockSubscriber_Expecter{mock: &_m.Mock}
}

// Destruct provides a mock function with given fields:
func (_m *MockSubscriber) Destruct() {
	_m.Called()
}

// MockSubscriber_Destruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destruct'
type MockSubscriber_Destruct_Call struct {
	*mock.Call
}

// Destruct is a helper method to define mock.On call
func (_e *MockSubscriber_Expecter) Destruct() *MockSubscriber_Destruct_Call {
	return &MockSubscriber_Destruct_Call{Call: _e.mock.On("Destruct")}
}

func (_c *MockSubscriber_Destruct_Call) Run(run func()) *MockSubscriber_Destruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriber_Destruct_Call) Return() *MockSubscriber_Destruct_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscriber_Destruct_Call) RunAndReturn(run func()) *MockSubscriber_Destruct_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *MockSubscriber) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSubscriber_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockSubscriber_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockSubscriber_Expecter) GetID() *MockSubscriber_GetID_Call {
	return &MockSubscriber_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockSubscriber_GetID_Call) Run(run func()) *MockSubscriber_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriber_GetID_Call) Return(_a0 string) *MockSubscriber_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriber_GetID_Call) RunAndReturn(run func() string) *MockSubscriber_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// Signal provides a mock function with given fields: _a0
func (_m *MockSubscriber) Signal(_a0 *optimusv1.LogEvent) {
	_m.Called(_a0)
}

// MockSubscriber_Signal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signal'
type MockSubscriber_Signal_Call struct {
	*mock.Call
}

// Signal is a helper method to define mock.On call
//   - _a0 *optimusv1.LogEvent
func (_e *MockSubscriber_Expecter) Signal(_a0 interface{}) *MockSubscriber_Signal_Call {
	return &MockSubscriber_Signal_Call{Call: _e.mock.On("Signal", _a0)}
}

func (_c *MockSubscriber_Signal_Call) Run(run func(_a0 *optimusv1.LogEvent)) *MockSubscriber_Signal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*optimusv1.LogEvent))
	})
	return _c
}

func (_c *MockSubscriber_Signal_Call) Return() *MockSubscriber_Signal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscriber_Signal_Call) RunAndReturn(run func(*optimusv1.LogEvent)) *MockSubscriber_Signal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriber creates a new instance of MockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriber {
	mock := &MockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
