// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	optimusv1 "github.com/binarymatt/optimus/gen/optimus/v1"
	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/binarymatt/optimus/internal/pubsub"
)

// MockBroker is an autogenerated mock type for the Broker type
type MockBroker struct {
	mock.Mock
}

type MockBroker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBroker) EXPECT() *MockBroker_Expecter {
	return &MockBroker_Expecter{mock: &_m.Mock}
}

// AddSubscriber provides a mock function with given fields: _a0
func (_m *MockBroker) AddSubscriber(_a0 pubsub.Subscriber) {
	_m.Called(_a0)
}

// MockBroker_AddSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSubscriber'
type MockBroker_AddSubscriber_Call struct {
	*mock.Call
}

// AddSubscriber is a helper method to define mock.On call
//   - _a0 pubsub.Subscriber
func (_e *MockBroker_Expecter) AddSubscriber(_a0 interface{}) *MockBroker_AddSubscriber_Call {
	return &MockBroker_AddSubscriber_Call{Call: _e.mock.On("AddSubscriber", _a0)}
}

func (_c *MockBroker_AddSubscriber_Call) Run(run func(_a0 pubsub.Subscriber)) *MockBroker_AddSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pubsub.Subscriber))
	})
	return _c
}

func (_c *MockBroker_AddSubscriber_Call) Return() *MockBroker_AddSubscriber_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBroker_AddSubscriber_Call) RunAndReturn(run func(pubsub.Subscriber)) *MockBroker_AddSubscriber_Call {
	_c.Call.Return(run)
	return _c
}

// Broadcast provides a mock function with given fields: _a0
func (_m *MockBroker) Broadcast(_a0 *optimusv1.LogEvent) {
	_m.Called(_a0)
}

// MockBroker_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MockBroker_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - _a0 *optimusv1.LogEvent
func (_e *MockBroker_Expecter) Broadcast(_a0 interface{}) *MockBroker_Broadcast_Call {
	return &MockBroker_Broadcast_Call{Call: _e.mock.On("Broadcast", _a0)}
}

func (_c *MockBroker_Broadcast_Call) Run(run func(_a0 *optimusv1.LogEvent)) *MockBroker_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*optimusv1.LogEvent))
	})
	return _c
}

func (_c *MockBroker_Broadcast_Call) Return() *MockBroker_Broadcast_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBroker_Broadcast_Call) RunAndReturn(run func(*optimusv1.LogEvent)) *MockBroker_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBroker interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBroker creates a new instance of MockBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBroker(t mockConstructorTestingTNewMockBroker) *MockBroker {
	mock := &MockBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
