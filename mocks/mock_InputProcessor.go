// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/binarymatt/optimus/internal/pubsub"
)

// MockInputProcessor is an autogenerated mock type for the InputProcessor type
type MockInputProcessor struct {
	mock.Mock
}

type MockInputProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInputProcessor) EXPECT() *MockInputProcessor_Expecter {
	return &MockInputProcessor_Expecter{mock: &_m.Mock}
}

// Initialize provides a mock function with given fields: id, broker
func (_m *MockInputProcessor) Initialize(id string, broker pubsub.Broker) error {
	ret := _m.Called(id, broker)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, pubsub.Broker) error); ok {
		r0 = rf(id, broker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInputProcessor_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockInputProcessor_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - id string
//   - broker pubsub.Broker
func (_e *MockInputProcessor_Expecter) Initialize(id interface{}, broker interface{}) *MockInputProcessor_Initialize_Call {
	return &MockInputProcessor_Initialize_Call{Call: _e.mock.On("Initialize", id, broker)}
}

func (_c *MockInputProcessor_Initialize_Call) Run(run func(id string, broker pubsub.Broker)) *MockInputProcessor_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(pubsub.Broker))
	})
	return _c
}

func (_c *MockInputProcessor_Initialize_Call) Return(_a0 error) *MockInputProcessor_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInputProcessor_Initialize_Call) RunAndReturn(run func(string, pubsub.Broker) error) *MockInputProcessor_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: _a0
func (_m *MockInputProcessor) Process(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInputProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockInputProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockInputProcessor_Expecter) Process(_a0 interface{}) *MockInputProcessor_Process_Call {
	return &MockInputProcessor_Process_Call{Call: _e.mock.On("Process", _a0)}
}

func (_c *MockInputProcessor_Process_Call) Run(run func(_a0 context.Context)) *MockInputProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInputProcessor_Process_Call) Return(_a0 error) *MockInputProcessor_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInputProcessor_Process_Call) RunAndReturn(run func(context.Context) error) *MockInputProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockInputProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInputProcessor creates a new instance of MockInputProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInputProcessor(t mockConstructorTestingTNewMockInputProcessor) *MockInputProcessor {
	mock := &MockInputProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
