// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: optimus/v1/optimus.proto

package optimusv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/binarymatt/optimus/gen/optimus/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// OptimusLogServiceName is the fully-qualified name of the OptimusLogService service.
	OptimusLogServiceName = "optimus.v1.OptimusLogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OptimusLogServiceStoreLogEventProcedure is the fully-qualified name of the OptimusLogService's
	// StoreLogEvent RPC.
	OptimusLogServiceStoreLogEventProcedure = "/optimus.v1.OptimusLogService/StoreLogEvent"
)

// OptimusLogServiceClient is a client for the optimus.v1.OptimusLogService service.
type OptimusLogServiceClient interface {
	// Store saves an event(s) onto the processing pipeline
	StoreLogEvent(context.Context, *connect.Request[v1.StoreLogEventRequest]) (*connect.Response[v1.StoreLogEventResponse], error)
}

// NewOptimusLogServiceClient constructs a client for the optimus.v1.OptimusLogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOptimusLogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OptimusLogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &optimusLogServiceClient{
		storeLogEvent: connect.NewClient[v1.StoreLogEventRequest, v1.StoreLogEventResponse](
			httpClient,
			baseURL+OptimusLogServiceStoreLogEventProcedure,
			opts...,
		),
	}
}

// optimusLogServiceClient implements OptimusLogServiceClient.
type optimusLogServiceClient struct {
	storeLogEvent *connect.Client[v1.StoreLogEventRequest, v1.StoreLogEventResponse]
}

// StoreLogEvent calls optimus.v1.OptimusLogService.StoreLogEvent.
func (c *optimusLogServiceClient) StoreLogEvent(ctx context.Context, req *connect.Request[v1.StoreLogEventRequest]) (*connect.Response[v1.StoreLogEventResponse], error) {
	return c.storeLogEvent.CallUnary(ctx, req)
}

// OptimusLogServiceHandler is an implementation of the optimus.v1.OptimusLogService service.
type OptimusLogServiceHandler interface {
	// Store saves an event(s) onto the processing pipeline
	StoreLogEvent(context.Context, *connect.Request[v1.StoreLogEventRequest]) (*connect.Response[v1.StoreLogEventResponse], error)
}

// NewOptimusLogServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOptimusLogServiceHandler(svc OptimusLogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	optimusLogServiceStoreLogEventHandler := connect.NewUnaryHandler(
		OptimusLogServiceStoreLogEventProcedure,
		svc.StoreLogEvent,
		opts...,
	)
	return "/optimus.v1.OptimusLogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OptimusLogServiceStoreLogEventProcedure:
			optimusLogServiceStoreLogEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOptimusLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOptimusLogServiceHandler struct{}

func (UnimplementedOptimusLogServiceHandler) StoreLogEvent(context.Context, *connect.Request[v1.StoreLogEventRequest]) (*connect.Response[v1.StoreLogEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("optimus.v1.OptimusLogService.StoreLogEvent is not implemented"))
}
